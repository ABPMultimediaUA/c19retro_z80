ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 ;;
                              2 ;;  RENDER SYSTEM
                              3 ;;
                              4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              5 .include "../man/entity_manager.h.s"
                              1 ;;
                              2 ;;  ENTITY MANAGER HEADER
                              3 ;;
                              4 
                              5 .globl  man_entity_init
                              6 
                              7 .globl  man_entity_update
                              8 
                              9 .globl  man_entity_create_entity
                             10 .globl  man_entity_create_bomb
                             11 
                             12 .globl  man_entity_get_player
                             13 .globl  man_entity_get_enemy_array
                             14 .globl  man_entity_get_bomb_array
                             15 
                             16 .globl  man_entity_set_player_dead
                             17 .globl  man_entity_set_enemy_dead
                             18 
                             19 ;;########################################################
                             20 ;;                        MACROS                         #              
                             21 ;;########################################################
                             22 
                             23 ;;-----------------------  ENTITY  -----------------------
                             24 .macro DefineEntity _type,_x,_y,_w,_h,_vx,_vy,_sp_ptr_0
                             25     .db _type
                             26     .db _x, _y
                             27     .db _w, _h      ;; both in bytes
                             28     .db _vx, _vy    
                             29     .dw _sp_ptr_0
                             30 .endm
                             31 
                             32 .macro DefineEntityDefault
                             33     .db alive_type
                             34     .db 0xDE, 0xAD
                             35     .db 4, 16  
                             36     .dw 0xADDE 
                             37     .dw 0xCCCC
                             38 .endm
                             39 
                             40 .macro DefineEntityArray _Tname,_N,_DefineEntity
                             41     _Tname'_num:    .db 0    
                             42     _Tname'_last:   .dw _Tname'_array
                             43     _Tname'_array: 
                             44     .rept _N    
                             45         _DefineEntity
                             46     .endm
                             47 .endm
                             48 
                             49 ;;-----------------------  BOMBS  ------------------------
                             50 .macro DefineBombDefault    
                             51     .db max_timer   ;; timer    
                             52     .db 0xDE,0xAD   ;; coordinates (x, y)
                             53     .db #4, #16     ;; width, height -> both in bytes    
                             54     .dw 0xCCCC      ;; sprite  pointer (where it's in memory video)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                             55 .endm
                             56 
                             57 .macro DefineBombArray _Tname,_N,_DefineBomb
                             58     _Tname'_num:    .db 0    
                             59     _Tname'_last:   .dw _Tname'_array
                             60     _Tname'_array: 
                             61     .rept _N    
                             62         _DefineBomb
                             63     .endm
                             64 .endm
                             65 
                             66 ;;########################################################
                             67 ;;                       CONSTANTS                       #             
                             68 ;;########################################################
                             69 
                             70 ;;-----------------------  ENTITY  -----------------------
                     0000    71 e_type = 0
                     0001    72 e_x = 1
                     0002    73 e_y = 2
                     0003    74 e_w = 3
                     0004    75 e_h = 4
                     0005    76 e_vx = 5
                     0006    77 e_vy = 6
                     0007    78 e_sp_ptr_0 = 7
                     0007    79 e_sp_ptr_1 = 7
                     0009    80 sizeof_e = 9
                     0001    81 max_entities = 1
                             82 
                             83 ;;-----------------------  BOMBS  ------------------------
                     0000    84 b_timer = 0
                     0001    85 b_x = 1
                     0002    86 b_y = 2
                     0003    87 b_w = 3
                     0004    88 b_h = 4
                     0005    89 b_sp_ptr_0 = 5
                     0006    90 b_sp_ptr_1 = 6
                     0007    91 sizeof_b = 7
                     0001    92 max_bombs = 1
                             93 
                             94 ;;########################################################
                             95 ;;                      ENTITY TYPES                     #             
                             96 ;;########################################################
                     0001    97 alive_type = 0x01
                     00FE    98 dead_type = 0xFE
                     00FF    99 invalid_type = 0xFF
                            100 
                            101 
                            102 ;;########################################################
                            103 ;;                       BOMB TIMERS                     #             
                            104 ;;########################################################
                     0000   105 zero_timer = 0x00
                     00FF   106 max_timer = 0xFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              6 .include "../cpct_functions.h.s"
                              1 
                              2 .globl  cpct_disableFirmware_asm
                              3 .globl  cpct_setVideoMode_asm
                              4 .globl  cpct_getScreenPtr_asm
                              5 .globl  cpct_waitVSYNC_asm
                              6 .globl  cpct_setPALColour_asm
                              7 .globl  cpct_getRandom_mxor_u8_asm
                              8 .globl  cpct_drawSpriteBlended_asm
                              9 .globl  cpct_scanKeyboard_f_asm
                             10 .globl  cpct_isKeyPressed_asm
                             11 
                             12 .globl  HW_BLACK
                             13 .globl  HW_WHITE
                             14 
                             15 .globl  CPCT_VMEM_START_ASM
                             16 .globl  Key_O
                             17 .globl  Key_P
                             18 .globl  Key_Q
                             19 .globl  Key_A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              7 .include "render_system.h.s"
                              1 ;;
                              2 ;;  RENDER SYSTEM HEADER
                              3 ;;
                              4 
                              5 .globl  sys_render_init
                              6 .globl  sys_render_update
                              7 .globl  sys_render_remove_entity
                              8 .globl  sys_render_remove_bomb
                              9 
                             10 
                             11 ;;########################################################
                             12 ;;                       CONSTANTS                       #             
                             13 ;;########################################################
                     0000    14 video_mode = 0
                             15 
                             16 ;; in pixels
                     00A0    17 screen_width = 160
                     00C8    18 screen_height = 200
                             19 
                             20 ;;  1 byte for each +-1 Y coordinate (1px)
                             21 ;;  200px = 25 char -> 1 bomberman cell = 2height*2width chars
                             22 ;;  25chars*1cell/2char = 12 cells, rest 1 char
                             23 ;;  1 char = 8px -> so the map is centered, 4px up, 4px down
                     0004    24 min_map_y_coord_valid = 4      ;;  [0-3] border, >=4 map
                     00B3    25 max_map_y_coord_valid = 195-16    ;;  [196-199] border, <=195 map -16px
                             26 
                             27 ;;  1 byte for each +-2 X coordinate (2px)
                             28 ;;  160px = 20 char -> 1 bomberman cell = 2height*2width chars
                             29 ;;  20chars*1cell/2char = 10 cells -> 4 cells left border, 5 cells map
                             30 ;;  rest 1 cell=2 char, 1 char left border, 1 char right border
                             31 ;;  1 char = 8px -> so the map is centered, 4px up, 4px down
                             32 ;;  9 char left map, 10 char map, 1 char right map
                             33 ;;  9char*8px*1byte/2px = 36, 19char*8px*1byte/2=76
                     0024    34 min_map_x_coord_valid = 36      ;;  [0-35] border, >=35 map
                     004F    35 max_map_x_coord_valid = 79    ;;  [78-79] border, <=77 map
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                              8 .include "../assets/assets.h.s"
                              1 .globl  _sp_player
                              2 .globl  _sp_enemy
                              3 .globl  _sp_bomb
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                              9 
                             10 
                             11 ;;########################################################
                             12 ;;                   PRIVATE FUNCTIONS                   #             
                             13 ;;########################################################
                             14 ;;
                             15 ;;  Render player and update its sp_ptr
                             16 ;;  INPUT:
                             17 ;;    none
                             18 ;;  RETURN: 
                             19 ;;    none
                             20 ;;  DESTROYED:
                             21 ;;    DE,BC,HL,IX
   0000                      22 sys_render_player::
   0000 CD 00 00      [17]   23   call  man_entity_get_player
                             24 
                             25   ;call  sys_render_remove_entity
                             26   
                             27   ;; Calculate a video-memory location for sprite
   0003 11 00 00      [10]   28   ld    de, #CPCT_VMEM_START_ASM    ;; DE = Pointer to start of the screen
   0006 DD 4E 01      [19]   29   ld    c, e_x(ix)                  ;; C = x coordinate       
   0009 DD 46 02      [19]   30   ld    b, e_y(ix)                  ;; B = y coordinate   
   000C CD 00 00      [17]   31   call  cpct_getScreenPtr_asm       ;; Calculate video memory location and return it in HL
                             32   
                             33   ;;  Store in _sp_ptr the video-memory location where the sprite is going to be written
   000F DD 75 07      [19]   34   ld  e_sp_ptr_0(ix), l
   0012 DD 74 07      [19]   35   ld  e_sp_ptr_1(ix), h
                             36 
                             37   ;;  Draw sprite blended
   0015 EB            [ 4]   38   ex    de, hl                      ;; DE = Destination video memory pointer
   0016 21 00 00      [10]   39   ld    hl, #_sp_player             ;; Source Sprite Pointer (array with pixel data)
   0019 DD 46 03      [19]   40   ld    b, e_w(ix)                  ;; Sprite width
   001C DD 4E 04      [19]   41   ld    c, e_h(ix)                  ;; Sprite height
   001F CD 00 00      [17]   42   call  cpct_drawSpriteBlended_asm    
   0022 C9            [10]   43   ret
                             44 
                             45 
                             46 ;;
                             47 ;;  Render enemies and update their sp_ptr
                             48 ;;  INPUT:
                             49 ;;    none
                             50 ;;  RETURN: 
                             51 ;;    none
                             52 ;;  DESTROYED:
                             53 ;;    A,DE,BC,HL,IX
   0023                      54 sys_render_enemies::
   0023 CD 00 00      [17]   55   call   man_entity_get_enemy_array
   0026                      56   render_enemies_loop:
   0026 F5            [11]   57     push  af
                             58 
                             59     ;call  sys_render_remove_entity
                             60     
                             61     ;; Calculate a video-memory location for sprite
   0027 11 00 00      [10]   62     ld    de, #CPCT_VMEM_START_ASM    ;; DE = Pointer to start of the screen
   002A DD 4E 01      [19]   63     ld    c, e_x(ix)                  ;; C = x coordinate       
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



   002D DD 46 02      [19]   64     ld    b, e_y(ix)                  ;; B = y coordinate   
   0030 CD 00 00      [17]   65     call  cpct_getScreenPtr_asm       ;; Calculate video memory location and return it in HL
                             66     
                             67     ;;  Store in _sp_ptr the video-memory location where the sprite is going to be written
   0033 DD 75 07      [19]   68     ld  e_sp_ptr_0(ix), l
   0036 DD 74 07      [19]   69     ld  e_sp_ptr_1(ix), h
                             70 
                             71     ;;  Draw sprite blended
   0039 EB            [ 4]   72     ex    de, hl                      ;; DE = Destination video memory pointer
   003A 21 00 00      [10]   73     ld    hl, #_sp_enemy              ;; Source Sprite Pointer (array with pixel data)
   003D DD 46 03      [19]   74     ld    b, e_w(ix)                  ;; Sprite width
   0040 DD 4E 04      [19]   75     ld    c, e_h(ix)                  ;; Sprite height
   0043 CD 00 00      [17]   76     call  cpct_drawSpriteBlended_asm    
                             77   
   0046 01 09 00      [10]   78     ld   bc, #sizeof_e
   0049 DD 09         [15]   79     add  ix, bc
                             80 
   004B F1            [10]   81     pop   af
   004C 3D            [ 4]   82     dec   a
   004D C8            [11]   83     ret   z
   004E 18 D6         [12]   84     jr    render_enemies_loop
   0050 C9            [10]   85     ret
                             86 
                             87 
                             88 ;;
                             89 ;;  Render bombs and update their sp_ptr
                             90 ;;  INPUT:
                             91 ;;    none
                             92 ;;  RETURN: 
                             93 ;;    none
                             94 ;;  DESTROYED:
                             95 ;;    A,DE,BC,HL,IX
   0051                      96 sys_render_bombs::
   0051 CD 00 00      [17]   97   call   man_entity_get_bomb_array
   0054 B7            [ 4]   98   or     a   ;; _bomb_num OR _bomb_num: if Z=1, they're equal, 0 bombs in _bomb_array
   0055 C8            [11]   99   ret    z
   0056                     100   render_bombs_loop:
   0056 F5            [11]  101     push af
                            102 
                            103     ;call  sys_render_remove_entity
                            104     
                            105     ;; Calculate a video-memory location for sprite
   0057 11 00 00      [10]  106     ld    de, #CPCT_VMEM_START_ASM    ;; DE = Pointer to start of the screen
   005A DD 4E 01      [19]  107     ld    c, b_x(ix)                  ;; C = x coordinate       
   005D DD 46 02      [19]  108     ld    b, b_y(ix)                  ;; B = y coordinate   
   0060 CD 00 00      [17]  109     call  cpct_getScreenPtr_asm       ;; Calculate video memory location and return it in HL
                            110     
                            111     ;;  Store in _sp_ptr the video-memory location where the sprite is going to be written
   0063 DD 75 05      [19]  112     ld  b_sp_ptr_0(ix), l
   0066 DD 74 06      [19]  113     ld  b_sp_ptr_1(ix), h
                            114 
                            115     ;;  Draw sprite blended
   0069 EB            [ 4]  116     ex    de, hl                      ;; DE = Destination video memory pointer
   006A 21 00 00      [10]  117     ld    hl, #_sp_bomb               ;; Source Sprite Pointer (array with pixel data)    
   006D DD 46 03      [19]  118     ld    b, b_w(ix)                  ;; Sprite width
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



   0070 DD 4E 04      [19]  119     ld    c, b_h(ix)                  ;; Sprite height
   0073 CD 00 00      [17]  120     call  cpct_drawSpriteBlended_asm    
                            121   
   0076 01 07 00      [10]  122     ld   bc, #sizeof_b
   0079 DD 09         [15]  123     add  ix, bc
                            124 
   007B F1            [10]  125     pop   af
   007C 3D            [ 4]  126     dec   a
   007D C8            [11]  127     ret   z
   007E 18 D6         [12]  128     jr    render_bombs_loop
   0080 C9            [10]  129     ret
                            130 
                            131 ;;########################################################
                            132 ;;                   PUBLIC FUNCTIONS                    #             
                            133 ;;########################################################
                            134 
                            135 ;;
                            136 ;;  Set video mode and palette
                            137 ;;  INPUT:
                            138 ;;    none
                            139 ;;  RETURN: 
                            140 ;;    none
                            141 ;;  DESTROYED:
                            142 ;;    AF,BC,DE,HL
   0081                     143 sys_render_init::  
   0081 0E 00         [ 7]  144   ld    c, #0
   0083 CD 00 00      [17]  145   call  cpct_setVideoMode_asm    
                            146 
   0086 2E 00         [ 7]  147   ld    l, #0
   0088 26 00         [ 7]  148   ld    h, #HW_BLACK
   008A CD 00 00      [17]  149   call  cpct_setPALColour_asm
                            150     
   008D C9            [10]  151   ret
                            152 
                            153 
                            154 ;;
                            155 ;;  Updates the sprites on screen (video-memory)
                            156 ;;  INPUT:
                            157 ;;    none
                            158 ;;  RETURN: 
                            159 ;;    none
                            160 ;;  DESTROYED:
                            161 ;;    A,DE,BC,HL,IX
   008E                     162 sys_render_update::
   008E CD 00 00      [17]  163   call  sys_render_player
   0091 CD 23 00      [17]  164   call  sys_render_enemies
   0094 CD 51 00      [17]  165   call  sys_render_bombs
   0097 C9            [10]  166   ret  
                            167 
                            168 
                            169 ;;
                            170 ;;  Remove an entity from screen (video-memory)
                            171 ;;  INPUT:
                            172 ;;    ix  with memory address of entity that must be removed
                            173 ;;  RETURN: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                            174 ;;    none
                            175 ;;  DESTROYED:
                            176 ;;    AF,BC,DE,HL
   0098                     177 sys_render_remove_entity::
                            178   ;ld    e, e_sp_ptr_0(ix)          
                            179   ;ld    d, e_sp_ptr_1(ix)           ;; Destination video memory pointer
                            180   ;ld    hl, #_sp_enemy              ;; Source Sprite Pointer (array with pixel data)
                            181   ;ld    b, e_w(ix)                  ;; Sprite width
                            182   ;ld    c, e_h(ix)                  ;; Sprite height
                            183   ;call  cpct_drawSpriteBlended_asm
   0098 C9            [10]  184   ret
                            185 
                            186 
                            187 ;;
                            188 ;;  Remove an entity from screen (video-memory)
                            189 ;;  INPUT:
                            190 ;;    ix  with memory address of entity that must be removed
                            191 ;;  RETURN: 
                            192 ;;    none
                            193 ;;  DESTROYED:
                            194 ;;    AF,BC,DE,HL
   0099                     195 sys_render_remove_bomb::
                            196   ;ld    e, b_sp_ptr_0(ix)          
                            197   ;ld    d, b_sp_ptr_1(ix)           ;; Destination video memory pointer
                            198   ;ld    hl, #_sp_bomb               ;; Source Sprite Pointer (array with pixel data)
                            199   ;ld    b, b_w(ix)                  ;; Sprite width
                            200   ;ld    c, b_h(ix)                  ;; Sprite height
                            201   ;call  cpct_drawSpriteBlended_asm
   0099 C9            [10]  202   ret
